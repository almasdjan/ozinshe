
go get -u github.com/gin-gonic/gin
go get github.com/githubnemo/CompileDaemon
go get github.com/joho/godotenv
go get -u gorm.io/gorm
go get -u gorm.io/driver/postgres
go get github.com/badoux/checkmail

update users
set isadmin = 'true'
where email like '%al@gmail.com%'


create table genres( --так же создаем таблицы категории, категории возраста
	id BIGSERIAL NOT NULL PRIMARY KEY,
	genre_name varchar(255)
);


create table material_genres( -- я это не использую, Categories []*Category `gorm:"many2many:material_categories;"` создает таблицу
material_id bigint,
genre_id bigint,
PRIMARY KEY (material_id, genre_id),
FOREIGN KEY (material_id) REFERENCES materials (id),
FOREIGN KEY (genre_id) REFERENCES genres (id)
);

create table videos(
	material_id bigint not null, 
	sezon bigint,
	series bigint,
	add image_src varchar unique,
	video_src varchar unique not null,
	PRIMARY KEY (material_id, sezon, series),
	FOREIGN KEY (material_id) REFERENCES materials (id)
);



create table recommends(
	material_id bigint primary key,
	queue int
);


delete from material_ages;
delete from material_categories;
delete from material_genres;
delete from image_srcs;
delete from user_favourites;
delete from videos;
delete from materials;


--get recommends
select r.material_id, m.poster, m.title, m.description from materials m join recommends r on m.id = r.material_id order by r.queue




create table user_history(
id BIGSERIAL NOT NULL,
material_id bigint,
user_id bigint,
PRIMARY KEY (id, material_id, user_id),
FOREIGN KEY (material_id) REFERENCES materials (id),
FOREIGN KEY (user_id) REFERENCES users (id)
);





create table ages( --так же создаем таблицы категории, категории возраста
	id BIGSERIAL NOT NULL PRIMARY KEY,
	age varchar(255)
);




create table categories( --так же создаем таблицы категории, категории возраста
	id BIGSERIAL NOT NULL PRIMARY KEY,
	category_name varchar(255)
);



create table material_ages( 
material_id bigint,
age_id bigint,
PRIMARY KEY (material_id, age_id),
FOREIGN KEY (material_id) REFERENCES materials (id),
FOREIGN KEY (age_id) REFERENCES ages (id)
);


create table material_categories( 
material_id bigint,
category_id bigint,
PRIMARY KEY (material_id, category_id),
FOREIGN KEY (material_id) REFERENCES materials (id),
FOREIGN KEY (age_id) REFERENCES categories (id)
);





alter table materials
add m_type varchar(55) not null default 'Фильмы';

alter table ages
add image varchar(255) not null default 'https';

alter table genres
add image varchar(255) not null default 'https';

alter table videos 
add viewed int default 0

ALTER TABLE videos ALTER COLUMN sezon SET DEFAULT 0;
ALTER TABLE videos ALTER COLUMN series SET DEFAULT 0;
ALTER TABLE videos ADD CONSTRAINT unique_episodes UNIQUE (sezon,series, material_id);



WITH MaxSeries AS(
	WITH MaxSezon AS (
				SELECT 
					material_id, MAX(sezon) AS sezon
				FROM videos 
				GROUP BY material_id
			)
			SELECT --distinct on (m.id)
				m.id, v.sezon, max(v.series) series
			FROM materials m
			JOIN MaxSezon ms ON m.id = ms.material_id
			JOIN videos v ON m.id = v.material_id AND ms.sezon = v.sezon
			group by m.id, v.sezon
	)
	Select v.material_id, v.sezon, v.series, v.viewed
	from MaxSeries mss join videos v on mss.id = v.material_id where mss.sezon = v.sezon and mss.series = v.series

